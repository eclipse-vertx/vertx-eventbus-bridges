syntax = "proto3";

package vertx.event.v1alpha;

import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/rpc/status.proto";

option java_multiple_files = true;
option java_package = "io.vertx.grpc.event.v1alpha";
option java_outer_classname = "EventBusBridgeProto";

service EventBusBridge {
  // Publish a message to an address
  rpc Publish(PublishOp) returns (google.protobuf.Empty) {}

  // Send a message to an address (point-to-point)
  rpc Send(SendOp) returns (google.protobuf.Empty) {}

  // Request-reply pattern
  rpc Request(RequestOp) returns (EventBusMessage) {}

  // Subscribe to messages from an address
  rpc Subscribe(SubscribeOp) returns (stream EventBusMessage) {}

  // Unsubscribe from an address
  rpc Unsubscribe(UnsubscribeOp) returns (google.protobuf.Empty) {}

  // Health check
  rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

// Message used for publishing to an address
message PublishOp {
  // The address the message was sent to
  string address = 1;

  // Message headers
  map<string, string> headers = 2;

  // Message payload
  JsonValue body = 3;
}

// Message used for sending to an address (point-to-point)
message SendOp {
  // The address the message was sent to
  string address = 1;

  // Optional reply address
  string reply_address = 2;

  // Message headers
  map<string, string> headers = 3;

  // Message payload
  JsonValue body = 4;

  // Timeout in milliseconds
  google.protobuf.Duration timeout = 5;
}

// Message used for request-reply pattern
message RequestOp {
  // The address the message was sent to
  string address = 1;

  // Optional reply address
  string reply_address = 2;

  // Message headers
  map<string, string> headers = 3;

  // Message payload
  JsonValue body = 4;

  // The desired format of the reply body
  JsonValueFormat reply_body_format = 5;

  // Timeout in milliseconds
  google.protobuf.Duration timeout = 6;
}

// Message used for subscribing to an address
message SubscribeOp {
  // The address to subscribe to
  string address = 1;

  // Consumer for subscription management
  string consumer = 2;

  // Message headers
  map<string, string> headers = 3;

  // The desired format of the message body sent by the bridge
  JsonValueFormat message_body_format = 4;
}

// Message used for unsubscribing from an address
message UnsubscribeOp {
  // The address to unsubscribe from
  string address = 1;

  // Consumer for subscription management
  string consumer = 2;
}

// Message received from the event bus
message EventBusMessage {
  // The address the message was sent to
  string address = 1;

  // Consumer for subscription management
  string consumer = 2;

  // Optional reply address
  string reply_address = 3;

  // Message headers
  map<string, string> headers = 4;

  // Message payload
  JsonValue body = 5;

  // Optional status for error responses
  google.rpc.Status status = 6;
}

enum JsonValueFormat {
  // google.protobuf.Value (default)
  proto = 0;
  // protobuf encoded json string encoded as a byte array
  binary = 1;
  // protobuf encoded json string
  text = 2;
}

message JsonValue {
  oneof value {
    google.protobuf.Value proto = 1;
    bytes binary = 2;
    string text = 3;
  }
}
